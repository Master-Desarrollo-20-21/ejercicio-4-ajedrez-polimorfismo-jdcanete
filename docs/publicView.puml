@startuml

class Chess {
    + play: void()
    + {static} main()
    - resume(): boolean
}

Chess *--> Game

class Game {
    + play(): void
}

Game *--> Turn
Game *--> "2" Player
Game *--> Board

Turn o--> Player
Player o--> Board

class Turn {
    + get(): Player
    + next(); void
}

class Player {
    + move(): void
}

class Board {
    + checkmate(): boolean
}

Player ..> Console
Player --> Coordinate: "origin"
Player --> Coordinate: "destination"
Player o--> Color

enum Color {
    BLACK
    WHITE
}

class Coordinate {
    + obtain(): void
    + path() : Coordinate[]
    + moveOneUnitTo(Coordinate): void
    + orientation(Coordinate): Orientation
    + distance(Coordinate): double
}

Coordinate ..> Orientation

enum Orientation {
    VERTICAL
    HORIZONTAL
    DIAGONAL
    IMPRECISE
}

class Board {
    + isValidFirstMove(Coordinate, Coordinate, Color): boolean
    + isValidNoFirstMove(Coordinate, Coordinate, Color): boolean
    + move(Coordinate, Coordinate, Color): void
    + show(): void
}

Coordinate ..> Console
Board ..> Console
Board *--> "8*8" Square
Board *--> "16" Piece: "whites"
Board *--> "16" Piece: "blacks"

class Console {
    + read(String): void
    + write(String): void
}

Square o--> Piece
Square *--> Coordinate
Square ..> Type

class Square {
    + hasPiece(): boolean
    + hasPiece(Color): boolean
    + hasPiece(Type): boolean
    + clean(): void
    + put(Piece): void
    + take(): Piece
}

abstract class Piece {
    + isValidMove(Coordination): boolean
    + isValidCatch(Coordination): boolean
}

Piece o--> Color

Piece <|-- Bishop
Piece <|-- Knight
Piece <|-- Pawn
Piece <|-- King
Piece <|-- Queen
Piece <|-- Rook

class Pawn {
    + isValidFirstMove(): boolean
}

Piece --> Type
Piece ..> Orientation
enum Type {
    KNIGHT
    PAWN
    KING
    QUEEN
    ROOK
    BISHOP
}

@enduml